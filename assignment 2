Ans.26 = string is immutable. we cannot change after created. we can assign a string into a varialbe and always
use these quotation ("")double,  or ('') single. without use these quotation string never performed and our code
always give error

Ans.27 = In Python, strings are ordered sequences of character data, and thus can be indexed in this way. 
Individual characters in a string can be accessed by specifying the string name followed by a number in square 
brackets ([]).

Ans.28 =
string = "Big Data iNeuron"
list1 = list(string.split())
print(list1[2])

# Ans.29 = 
string = "Big Data iNeuron"
list2 = list(string.split())
print(list2[2][::-1])

# Ans.30 = 
string = "Big Data iNeuron"
print(string[::-1])


# Ans.31 = 
string = "Big Data iNeuron"
del(string)
print(string)

 Ans.32 = Escape sequence is that in which  the string or character converted into another character
 and it does not represent itself.

Ans.33 =
string = " 'iNeuron's Big Data Course' "
print(string)

Ans.34 = List is the sequence data type in which we store the collection of data. list is mutable it means 
 we can change anything anytime . In list we store list,tuple, set, dictionary . this is called list. 

Ans.35 =
list1 = ["pushkar", 24, 4399, 3+4j, "ineuron"]
print(list1)

Ans.36 =
list2 = ["pushkar", 24, 4399, 3+4j, "ineuron"]
print(list2[3])

Ans.37 = 
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
print(lst[4][2])


Ans.38 =
lst = list(input("enter your list"))
print(len(lst))


Ans.39 =
lst = ["Welcome", "to", "Data", "course"]
lst.insert(2, "Big")
print(lst)

Ans.40 = Tuple is immutable object it means In tuple we cannot change anything once created . In list we can 
 change something ,add something etc but in tuple we can not add or change , if there any list under a tuple
 so we can access these list change this list but not change in tuple, we can only use in tuple is Indexing,
 Slicing , Iteration. 

Ans.41 = we can create a tuple a tuple like this
t1 = ("pushkar",24, 4399,"Ineuron")
print(t1)

Ans.42 = So we cannot change or add anything in tuple
t2 = ("ram","ineuron","BigData","Nine_months")
t2.append("pushkar")
t2.insert(0,"pushkar")
print(t2)

Ans.43 = 
t3 = ("push","python","pandas")
t4 = ("BigData","Hadoop")
print(t3+t4)

Ans.44 = .....
t5 = tuple(input("enter your elements:"))
print(t5.items())


Ans.45 = Sets are used to store multiple items in a single variable.set remove the duplicate element ,
set doesnot hold list (it only hold unique elements if items are immutable sets allows you to hold the element 
sets also hold tuple


Ans.46 =
s1 = {1,2,3,4,5,6,7,8,9,10}
print(s1)

Ans.47 =
s2 = {"pushkar",24,45,67}
s2.add("ineuron")
print(s2)

Ans.48 =
s3 = set()
s3.add("pushkar")
s3.add("BigData")
s3.add("Ineuron")
s3.add("Batch2")
print(s3)

Ans.49 = update() is different from add() because update means update () the value from older to new and add ()
 means adding the new value in the variable so it is different from each other. 

Ans.50 = The clear method is that it removes all the elements in sets.

Ans.51 = Python frozenset() Method creates an immutable Set object from an iterable. It is a built-in Python
 function. As it is a set object therefore we cannot have duplicate values in the frozenset.

Ans.52 = Union in sets is it merging both of the sets and print the single set under both sets value
set_a = {1,2,3,4,5,6}
set_b = {3,6,8,9,10}
print(set_a | set_b)

Ans.53 = Intersection in sets in which the set will print only the common value of both sets
set_a = {1,2,3,4,5,6}
set_b = {3,6,8,9,10}
print(set_a & set_b)

Ans.54 = Dictionary in python in which it have key or value pair combination , A dictonary is a collection 
which is ordered or changeable and do not allow duplicates. 

Ans.55 = The dictionary Data Structure in Python is an unordered collection of items. While other Data 
Structures use only one value as the element, the dictionary is a slightly more compound data structure.
It makes use of two elements i.e. a pair of elements, namely, a key and a value.

Ans.56 =
d = {"name":"pushkar","age":24,"dob":4399,"course":"BigData"}
print(d)

Ans.57 = the output is , its type is dictionary
var = {}
print(type(var))

Ans.58 =
d1 = {"name":"pushkar","age":24,"dob":4399,"course":"BigData"}
d1["institute"] = "ineuron"
print(d1)

Ans.59 =
d2 = {"name":"pushkar","age":24,"dob":4399,"course":"BigData"}
print(d2.values())

Ans.61 =
dict1 = {
    "d1":{"name":"pushkar","age":24,"dob":4399},
    "d2":{"gmail":"ps@gmail.com","mob":12345}
    }
print(dict1["d1"])

Ans.62 = Get() function is for to get the keys or values in a dictionary, in dictionary we use .get function
d1 = {"name": "push","age":24,"Dob":4399}
print(d1.get("age"))

Ans.63 =  The use of items() function is to print all the items in the dictionary
dict1 = {"name":"pushkar","age":24,"dob":4399,"course":"BigData"}
print(dict1.items())

Ans.64 = The use of pop() function is for to remove the key or value in the dictionary
dict2 = {"name":"pushkar","age":24,"dob":4399,"course":"BigData","institute":"Ineuron"}
print(dict2.pop("course"))
print(dict2)

Ans.65 = The use of popitem() is for to remove the last key or value in the dictionary
dict2 = {"name":"pushkar","age":24,"dob":4399,"course":"BigData","institute":"Ineuron"}
print(dict2.popitem())
print(dict2)

Ans.66 = The use of keys() function is for to print all the keys in the dictionary
dict2 = {"name":"pushkar","age":24,"dob":4399,"course":"BigData","institute":"Ineuron"}
print(dict2.keys())

Ans.67 = The use of values() function is for to print all the values in the dictionary
dict2 = {"name":"pushkar","age":24,"dob":4399,"course":"BigData","institute":"Ineuron"}
print(dict2.values())

Ans.68 = Loops in python in which we can repeating something over and over until a particular condition is
 satisfied.

Ans.69 = There are 3 types of loops in python , (for loop, while loop, nested loop)

Ans.70 = The "for" loop used only when we already know the number of iterations. The "while" loop used only 
when the number of iteration are not exactly known. If the condition is not put up in "for" loop, then loop 
iterates infinite times. If the condition is not put up in "while" loop, it provides compilation error.

Ans.71 = The use of continue statement is for to print the value and ignore the value under the given conditon 
where we use continue statement

for i in range(1,11):
    if i == 5:
        continue
    print(i)

Ans.72 = The use of break statement  in Python, the break statement provides you with the opportunity to 
exit out of a loop when an external condition is triggered. You'll put the break statement within the block of
code under your loop statement, usually after a conditional if statement.

for i in range(1,11):
    if i == 8:
        break
    print(i)

Ans.73 = The use of "pass" statement is for it is used as a placeholder for future code. When the pass statement
 is executed nothing happens, but you avoid getting an error when empty code is not allowed. Empty code is not
 allowed in loops, function definitions, class definitions, or in if statements.

Ans.74 = The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 
(by default), and stops before a specified number.

for i in range(1,11):
    print(i)

Ans.75 =
dict2 = {"name":"pushkar","age":24,"dob":4399,"course":"BigData","institute":"Ineuron"}
for i in dict2.items():
    print(i)


Ans.76 = 
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
n=int(input("enter your num: "))
print(factorial(n))

Ans.77 = 

def simple_intrest (p,r,t):
    
    si =(p*r*t)//100
    print(si)  

simple_intrest(1000, 24, 4)

Ans.78
def ci(p, r, t):
  amount = p*(1+r/100)**t
  ci = amount - p
  print(ci)
  return ci

ci(5000, 5.05, 5)


Ans.79 =
num = int(input("enter your number:"))
if num % 2 == 0:
    print("not a prime",i)
elif num % 3 == 0:
    print("not a prime",i)   
elif num % 5 == 0:
    print("not a prime",i)
elif num % 7 == 0:
    print("not a prime",i)
else:
    print("num is prime:",num)            


Ans.80 =

num = int(input("Enter a number: "))
sum = 0
# find the sum of the cube of each digit
temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** 3
   temp //= 10

if num == sum:
   print(num,"is an Armstrong number")
else:
   print(num,"is not an Armstrong number")

Ans.81 =
def Fibonacci(n):
    if n<= 0:
        print("Incorrect input")
    # First Fibonacci number is 0
    elif n == 1:
        return 0
    # Second Fibonacci number is 1
    elif n == 2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)
 
print(Fibonacci(10))

Ans.82 =
def swapList(sl):
    n = len(sl)
      
    # Swapping 
    temp = sl[0]
    sl[0] = sl[n - 1]
    sl[n - 1] = temp
      
    return sl
      
l = [10, 14, 5, 9, 56, 12]

print(l)
print("Swapped list: ",swapList(l))

Ans.83 =
def swapPositions(list, pos1, pos2):
     
    list[pos1], list[pos2] = list[pos2], list[pos1]
    return list
 
List = [23, 65, 19, 90]
pos1, pos2  = 1, 3
 
print(swapPositions(List, pos1-1, pos2-1))


Ans.84 =
def N_max_elements(list, N):
    result_list = []
  
    for i in range(0, N): 
        maximum = 0
          
        for j in range(len(list)):     
            if list[j] > maximum:
                maximum = list[j]
                  
        list.remove(maximum)
        result_list.append(maximum)
          
    return result_list
  
list1 = [4, 7, 61, 91, 2, 8, 11, 6, 10]
N = 2

print(N, "max elements in ",list1)
  
print(N_max_elements(list1, N))

Ans.85 = 
def Cumulative(lists):
    cu_list = []
    length = len(lists)
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)]
    return cu_list[1:]
 
lists = [10, 20, 30, 40, 50]
print (Cumulative(lists))

Ans.86 =
def isPalindrome(s):
    return s == s[::-1]
 
 
s = "malayalam"
ans = isPalindrome(s)
 
if ans:
    print("Yes")
else:
    print("No")

Ans.87 = 
def remove_ith_element(i):
  str1 = "This is Ineuron"
  str2 = ""

  for n in range(len(str1)):
    if n == i:
      continue
    else:
      str2 = str2 + str1[n]

  return str2

print(remove_ith_element(10))

Ans.88 =

str1 = "This is Ineuron Big Data Bootcamp"
 
if "Ineuron" in str1:
    print("Yes! it is present in the string")
else:
    print("No! it is not present")

Ans.89 = 
def string_greater_than_k(k, str):
	
	string = []

	str1 = str.split(" ")

	for x in str1:

		if len(x) > k:

			string.append(x)

	return string

k = 3
str ="This is Ineuron"
print(string_greater_than_k(k, str))


Ans.90 = 
dict1 = {'A' : [1, 3, 5, 4],
             'B' : [4, 6, 8, 10],
             'C' : [6, 12, 4 ,8],
             'D' : [5, 7, 2]}

print("The original dictionary is : " ,dict1)
  
# Using list comprehension values() and sorted()
res = list(sorted({ele for val in dict1.values() for ele in val}))
  
# print result 
print("The unique values list is : " , res) 


Ans.91 =
def Merge(dict1, dict2):
    return(dict2.update(dict1))
 
dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}
 
# This returns None
print(Merge(dict1, dict2))
 
# changes made in dict2
print(dict2)


Ans.92 =
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
print(dict([('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]))

Ans.93 =
list1 = [1, 2, 5, 6]
res = [(val, pow(val, 3)) for val in list1]
print(res)

Ans.94 =
test_tuple1 = (4, 5)
test_tuple2 = (6, 9)

res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

print("The filtered tuple : ", str(res))

Ans.95 =
def Sort_Tuple(tup):
     
    lst = len(tup)
    for i in range(0, lst):
         
        for j in range(0, lst-i-1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j]= tup[j + 1]
                tup[j + 1]= temp
    return tup
 
tup =[('295', 9), ('482', 4), ('109', 19), ('154', 16)]
       
print(Sort_Tuple(tup))

Ans.96
num_rows = int(input("Enter the number of rows"));
k = 1
for i in range(0, num_rows):
    for j in range(0, k):
        print("* ", end="")
    k = k + 1
    print()

Ans.97 = 
num_rows = int(input("Enter the number of rows"));
k = 8
for i in range(0, num_rows):
    for j in range(0, k):
        print(end=" ")
    k = k - 2
    for j in range(0, i+1):
        print("* ", end="")
    print()

Ans.98
num_rows = int(input("Enter the number of rows"));
for i in range(0, num_rows):
	for j in range(0, num_rows-i-1):
		print(end=" ")
	for j in  range(0, i+1):
		print("*", end=" ")
	print()

Ans.99
rows = 5
for i in range(1, rows + 1):
    for j in range(1, i + 1):
        print(j, end=' ')
    print('')

Ans.100 =
for i in range (65,70):
    # inner loop
    for j in range(65,i+1):
        print(chr(i),end="")
    print()
